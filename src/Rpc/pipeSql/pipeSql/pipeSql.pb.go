// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeSql.proto

package pipeSql

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type SqlRequest struct {
	XXname               string   `protobuf:"bytes,1,opt,name=xXname,proto3" json:"xXname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqlRequest) Reset()         { *m = SqlRequest{} }
func (m *SqlRequest) String() string { return proto.CompactTextString(m) }
func (*SqlRequest) ProtoMessage()    {}
func (*SqlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_221b534b159dc8eb, []int{0}
}

func (m *SqlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SqlRequest.Unmarshal(m, b)
}
func (m *SqlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SqlRequest.Marshal(b, m, deterministic)
}
func (m *SqlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqlRequest.Merge(m, src)
}
func (m *SqlRequest) XXX_Size() int {
	return xxx_messageInfo_SqlRequest.Size(m)
}
func (m *SqlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SqlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SqlRequest proto.InternalMessageInfo

func (m *SqlRequest) GetXXname() string {
	if m != nil {
		return m.XXname
	}
	return ""
}

// The response message containing the greetings
type SqlReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqlReply) Reset()         { *m = SqlReply{} }
func (m *SqlReply) String() string { return proto.CompactTextString(m) }
func (*SqlReply) ProtoMessage()    {}
func (*SqlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_221b534b159dc8eb, []int{1}
}

func (m *SqlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SqlReply.Unmarshal(m, b)
}
func (m *SqlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SqlReply.Marshal(b, m, deterministic)
}
func (m *SqlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqlReply.Merge(m, src)
}
func (m *SqlReply) XXX_Size() int {
	return xxx_messageInfo_SqlReply.Size(m)
}
func (m *SqlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SqlReply.DiscardUnknown(m)
}

var xxx_messageInfo_SqlReply proto.InternalMessageInfo

func (m *SqlReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SqlRequest)(nil), "pipeSql.SqlRequest")
	proto.RegisterType((*SqlReply)(nil), "pipeSql.SqlReply")
}

func init() { proto.RegisterFile("pipeSql.proto", fileDescriptor_221b534b159dc8eb) }

var fileDescriptor_221b534b159dc8eb = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xc8, 0x2c, 0x48,
	0x0d, 0x2e, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x54, 0xb8,
	0xb8, 0x82, 0x0b, 0x73, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0x2a,
	0x22, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x25, 0x15,
	0x2e, 0x0e, 0xb0, 0xaa, 0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4,
	0x74, 0x98, 0x22, 0x18, 0xd7, 0xa8, 0x84, 0x8b, 0xdd, 0xbd, 0x28, 0x35, 0xb5, 0x24, 0xb5, 0x48,
	0xc8, 0x90, 0x8b, 0x35, 0x25, 0x3f, 0x38, 0xd0, 0x47, 0x48, 0x58, 0x0f, 0x66, 0x31, 0xc2, 0x1a,
	0x29, 0x41, 0x54, 0xc1, 0x82, 0x9c, 0x4a, 0x25, 0x06, 0x21, 0x33, 0x2e, 0x2e, 0xb0, 0x16, 0xc7,
	0xf4, 0xc4, 0xcc, 0x3c, 0xe2, 0xf5, 0x39, 0x69, 0x71, 0x49, 0x64, 0xe6, 0xeb, 0xa5, 0x17, 0x15,
	0x24, 0xeb, 0xa5, 0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0x16, 0xc3, 0x94, 0x39, 0xf1, 0x40, 0x19,
	0x01, 0x20, 0x4f, 0x07, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x74, 0x28, 0xed, 0x28, 0x0e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	DoSQL(ctx context.Context, in *SqlRequest, opts ...grpc.CallOption) (*SqlReply, error)
	// Sends another greeting
	DoSQLAgain(ctx context.Context, in *SqlRequest, opts ...grpc.CallOption) (*SqlReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) DoSQL(ctx context.Context, in *SqlRequest, opts ...grpc.CallOption) (*SqlReply, error) {
	out := new(SqlReply)
	err := c.cc.Invoke(ctx, "/pipeSql.Greeter/doSQL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DoSQLAgain(ctx context.Context, in *SqlRequest, opts ...grpc.CallOption) (*SqlReply, error) {
	out := new(SqlReply)
	err := c.cc.Invoke(ctx, "/pipeSql.Greeter/doSQLAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	DoSQL(context.Context, *SqlRequest) (*SqlReply, error)
	// Sends another greeting
	DoSQLAgain(context.Context, *SqlRequest) (*SqlReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_DoSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DoSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeSql.Greeter/DoSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DoSQL(ctx, req.(*SqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DoSQLAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DoSQLAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeSql.Greeter/DoSQLAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DoSQLAgain(ctx, req.(*SqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeSql.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "doSQL",
			Handler:    _Greeter_DoSQL_Handler,
		},
		{
			MethodName: "doSQLAgain",
			Handler:    _Greeter_DoSQLAgain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeSql.proto",
}
